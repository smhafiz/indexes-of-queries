// This file was generated by BarretCUDA v0.1 
// 
// BarretCUDA is a fast(ish) CUDA implementation of sparse matrix
// multiplication modulo a multi-precision prime.
// 
// Copyright (C) 2016, Ryan Henry and Syed Mahbub Hafiz
// 
// 
// BarretCUDA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
// 
// BarretCUDA is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with BarretCUDA.  If not, see <http://www.gnu.org/licenses/>.

#ifndef __UINT_256_H
#define __UINT_256_H
#include "uint.h"

struct uint256
{
    uint128 w0; 				// limbs 0 to 3
    uint128 w4; 				// limbs 4 to 7
};

#ifndef __UINTX__
#define __UINTX__
    typedef uint256 uintX;
#endif

static inline NTL::ZZ to_ZZ(const uint256 & n)
{
    return to_ZZ<uint256>(n);
}

static inline NTL::ZZ_p to_ZZ_p(const uint256 & n)
{
    return NTL::to_ZZ_p(to_ZZ<uint256>(n));
}

static inline void to_uint256(const NTL::ZZ & n, uint256 & ret)
{
    to_uint<uint256>(n, ret);
}

__device__ __forceinline__ void normalize(uint256 & a_lo, uint256 & a_hi,
	const uint256 & s_lo, const uint256 & s_hi)
{
    uint * _a_lo = (uint *)&a_lo;
    uint * _a_hi = (uint *)&a_hi;
    const uint * _s_lo = (uint *)&s_lo;
    const uint * _s_hi = (uint *)&s_hi;
    asm("sub.cc.u32	 %0, %0,%16;\n\t"	// r0-=r16
	"subc.cc.u32	 %1, %1,%17;\n\t"	// r1-=(r17+c)
	"subc.cc.u32	 %2, %2,%18;\n\t"	// r2-=(r18+c)
	"subc.cc.u32	 %3, %3,%19;\n\t"	// r3-=(r19+c)
	"subc.cc.u32	 %4, %4,%20;\n\t"	// r4-=(r20+c)
	"subc.cc.u32	 %5, %5,%21;\n\t"	// r5-=(r21+c)
	"subc.cc.u32	 %6, %6,%22;\n\t"	// r6-=(r22+c)
	"subc.cc.u32	 %7, %7,%23;\n\t"	// r7-=(r23+c)
	"subc.cc.u32	 %8, %8,%24;\n\t"	// r8-=(r24+c)
	"subc.cc.u32	 %9, %9,%25;\n\t"	// r9-=(r25+c)
	"subc.cc.u32	%10,%10,%26;\n\t"	//r10-=(r26+c)
	"subc.cc.u32	%11,%11,%27;\n\t"	//r11-=(r27+c)
	"subc.cc.u32	%12,%12,%28;\n\t"	//r12-=(r28+c)
	"subc.cc.u32	%13,%13,%29;\n\t"	//r13-=(r29+c)
	"subc.cc.u32	%14,%14,%30;\n\t"	//r14-=(r30+c)
	"subc.u32	%15,%15,%31;\n\t"	//r15-=(r31+c)
	: "+r"(_a_lo[0]), "+r"(_a_lo[1]), "+r"(_a_lo[2]), "+r"(_a_lo[3]),
	  "+r"(_a_lo[4]), "+r"(_a_lo[5]), "+r"(_a_lo[6]), "+r"(_a_lo[7]),
	  "+r"(_a_hi[0]), "+r"(_a_hi[1]), "+r"(_a_hi[2]), "+r"(_a_hi[3]),
	  "+r"(_a_hi[4]), "+r"(_a_hi[5]), "+r"(_a_hi[6]), "+r"(_a_hi[7])
	: "r"(_s_lo[0]), "r"(_s_lo[1]), "r"(_s_lo[2]), "r"(_s_lo[3]),
	  "r"(_s_lo[4]), "r"(_s_lo[5]), "r"(_s_lo[6]), "r"(_s_lo[7]),
	  "r"(_s_hi[0]), "r"(_s_hi[1]), "r"(_s_hi[2]), "r"(_s_hi[3]),
	  "r"(_s_hi[4]), "r"(_s_hi[5]), "r"(_s_hi[6]), "r"(_s_hi[7]));
}

__device__ __forceinline__ void sub(uint256 & a_lo, uint256 & a_hi,
	const uintXp<uint256> & r)
{
    uint * _a_lo = (uint *)&a_lo;
    uint * _a_hi = (uint *)&a_hi;
    const uint * _r = (uint *)&r;
    asm("sub.cc.u32	 %0, %0, %9;\n\t"	// r0-= r9
	"subc.cc.u32	 %1, %1,%10;\n\t"	// r1-=(r10+c)
	"subc.cc.u32	 %2, %2,%11;\n\t"	// r2-=(r11+c)
	"subc.cc.u32	 %3, %3,%12;\n\t"	// r3-=(r12+c)
	"subc.cc.u32	 %4, %4,%13;\n\t"	// r4-=(r13+c)
	"subc.cc.u32	 %5, %5,%14;\n\t"	// r5-=(r14+c)
	"subc.cc.u32	 %6, %6,%15;\n\t"	// r6-=(r15+c)
	"subc.cc.u32	 %7, %7,%16;\n\t"	// r7-=(r16+c)
	"subc.u32	 %8, %8,%17;\n\t"	// r8-=(r17+c)
	: "+r"(_a_lo[0]), "+r"(_a_lo[1]), "+r"(_a_lo[2]), "+r"(_a_lo[3]),
	  "+r"(_a_lo[4]), "+r"(_a_lo[5]), "+r"(_a_lo[6]), "+r"(_a_lo[7]),
	  "+r"(_a_hi[0])
	: "r"(_r[0]), "r"(_r[1]), "r"(_r[2]), "r"(_r[3]), "r"(_r[4]),
	  "r"(_r[5]), "r"(_r[6]), "r"(_r[7]), "r"(_r[8]));
}

__device__ __forceinline__ uintXp<uint256> get_q(const uint256 & a_lo,
	const uint256 & a_hi, const uint256 & mu)
{
    uint __attribute__((unused)) tmp0;
    uint __attribute__((unused)) tmp1;
    uint __attribute__((unused)) tmp2;
    uint __attribute__((unused)) tmp3;
    uint __attribute__((unused)) tmp4;
    uintXp<uint256> q;
    uint * _q = (uint *)&q;
    uint * _a_lo = (uint *)&a_lo;
    uint * _a_hi = (uint *)&a_hi;
    uint * _mu = (uint *)&mu;
    asm("mul.hi.u32	 %6,%14,%23    ;\n\t"	// r6 =[r14*r23].hi   (r-7=>r6)
	"mad.lo.cc.u32	 %6,%15,%23, %6;\n\t"	// r6+=[r15*r23].lo   (r-7=>r6)
	"madc.lo.u32	 %7,%16,%23,  0;\n\t"	// r7 =[r16*r23].lo+c (r-6=>r7)
	"mad.lo.cc.u32	 %6,%14,%24, %6;\n\t"	// r6+=[r14*r24].lo   (r-7=>r6)
	"madc.lo.cc.u32	 %7,%15,%24, %7;\n\t"	// r7+=[r15*r24].lo+c (r-6=>r7)
	"madc.lo.u32	 %8,%17,%23,  0;\n\t"	// r8 =[r17*r23].lo+c (r-5=>r8)
	"mad.lo.cc.u32	 %7,%14,%25, %7;\n\t"	// r7+=[r14*r25].lo   (r-6=>r7)
	"madc.lo.cc.u32	 %8,%16,%24, %8;\n\t"	// r8+=[r16*r24].lo+c (r-5=>r8)
	"madc.lo.u32	 %9,%18,%23,  0;\n\t"	// r9 =[r18*r23].lo+c (r-4=>r9)
	"mad.hi.cc.u32	 %7,%15,%23, %7;\n\t"	// r7+=[r15*r23].hi   (r-6=>r7)
	"madc.lo.cc.u32	 %8,%15,%25, %8;\n\t"	// r8+=[r15*r25].lo+c (r-5=>r8)
	"madc.lo.cc.u32	 %9,%17,%24, %9;\n\t"	// r9+=[r17*r24].lo+c (r-4=>r9)
	"madc.lo.u32	%10,%19,%23,  0;\n\t"	//r10 =[r19*r23].lo+c (r-3=>r10)
	"mad.hi.cc.u32	 %7,%14,%24, %7;\n\t"	// r7+=[r14*r24].hi   (r-6=>r7)
	"madc.lo.cc.u32	 %8,%14,%26, %8;\n\t"	// r8+=[r14*r26].lo+c (r-5=>r8)
	"madc.lo.cc.u32	 %9,%16,%25, %9;\n\t"	// r9+=[r16*r25].lo+c (r-4=>r9)
	"madc.lo.cc.u32	%10,%18,%24,%10;\n\t"	//r10+=[r18*r24].lo+c (r-3=>r10)
	"madc.lo.u32	%11,%20,%23,  0;\n\t"	//r11 =[r20*r23].lo+c (r-2=>r11)
	"mad.hi.cc.u32	 %8,%16,%23, %8;\n\t"	// r8+=[r16*r23].hi   (r-5=>r8)
	"madc.lo.cc.u32	 %9,%15,%26, %9;\n\t"	// r9+=[r15*r26].lo+c (r-4=>r9)
	"madc.lo.cc.u32	%10,%17,%25,%10;\n\t"	//r10+=[r17*r25].lo+c (r-3=>r10)
	"madc.lo.cc.u32	%11,%19,%24,%11;\n\t"	//r11+=[r19*r24].lo+c (r-2=>r11)
	"madc.lo.u32	%12,%21,%23,  0;\n\t"	//r12 =[r21*r23].lo+c (r-1=>r12)
	"mad.hi.cc.u32	 %8,%15,%24, %8;\n\t"	// r8+=[r15*r24].hi   (r-5=>r8)
	"madc.lo.cc.u32	 %9,%14,%27, %9;\n\t"	// r9+=[r14*r27].lo+c (r-4=>r9)
	"madc.lo.cc.u32	%10,%16,%26,%10;\n\t"	//r10+=[r16*r26].lo+c (r-3=>r10)
	"madc.lo.cc.u32	%11,%18,%25,%11;\n\t"	//r11+=[r18*r25].lo+c (r-2=>r11)
	"madc.lo.cc.u32	%12,%20,%24,%12;\n\t"	//r12+=[r20*r24].lo+c (r-1=>r12)
	"madc.lo.u32	%13,%22,%23,  0;\n\t"	//r13 =[r22*r23].lo+c
	"mad.hi.cc.u32	 %8,%14,%25, %8;\n\t"	// r8+=[r14*r25].hi   (r-5=>r8)
	"madc.hi.cc.u32	 %9,%17,%23, %9;\n\t"	// r9+=[r17*r23].hi+c (r-4=>r9)
	"madc.lo.cc.u32	%10,%15,%27,%10;\n\t"	//r10+=[r15*r27].lo+c (r-3=>r10)
	"madc.lo.cc.u32	%11,%17,%26,%11;\n\t"	//r11+=[r17*r26].lo+c (r-2=>r11)
	"madc.lo.cc.u32	%12,%19,%25,%12;\n\t"	//r12+=[r19*r25].lo+c (r-1=>r12)
	"madc.lo.cc.u32	%13,%21,%24,%13;\n\t"	//r13+=[r21*r24].lo+c
	"madc.lo.u32	 %0,%22,%24,  0;\n\t"	// r0 =[r22*r24].lo+c
	"mad.hi.cc.u32	 %9,%16,%24, %9;\n\t"	// r9+=[r16*r24].hi   (r-4=>r9)
	"madc.lo.cc.u32	%10,%14,%28,%10;\n\t"	//r10+=[r14*r28].lo+c (r-3=>r10)
	"madc.lo.cc.u32	%11,%16,%27,%11;\n\t"	//r11+=[r16*r27].lo+c (r-2=>r11)
	"madc.lo.cc.u32	%12,%18,%26,%12;\n\t"	//r12+=[r18*r26].lo+c (r-1=>r12)
	"madc.lo.cc.u32	%13,%20,%25,%13;\n\t"	//r13+=[r20*r25].lo+c
	"madc.lo.cc.u32	 %0,%21,%25, %0;\n\t"	// r0+=[r21*r25].lo+c
	"madc.lo.u32	 %1,%22,%25,  0;\n\t"	// r1 =[r22*r25].lo+c
	"mad.hi.cc.u32	 %9,%15,%25, %9;\n\t"	// r9+=[r15*r25].hi   (r-4=>r9)
	"madc.hi.cc.u32	%10,%18,%23,%10;\n\t"	//r10+=[r18*r23].hi+c (r-3=>r10)
	"madc.lo.cc.u32	%11,%15,%28,%11;\n\t"	//r11+=[r15*r28].lo+c (r-2=>r11)
	"madc.lo.cc.u32	%12,%17,%27,%12;\n\t"	//r12+=[r17*r27].lo+c (r-1=>r12)
	"madc.lo.cc.u32	%13,%19,%26,%13;\n\t"	//r13+=[r19*r26].lo+c
	"madc.lo.cc.u32	 %0,%20,%26, %0;\n\t"	// r0+=[r20*r26].lo+c
	"madc.lo.cc.u32	 %1,%21,%26, %1;\n\t"	// r1+=[r21*r26].lo+c
	"madc.lo.u32	 %2,%22,%26,  0;\n\t"	// r2 =[r22*r26].lo+c
	"mad.hi.cc.u32	 %9,%14,%26, %9;\n\t"	// r9+=[r14*r26].hi   (r-4=>r9)
	"madc.hi.cc.u32	%10,%17,%24,%10;\n\t"	//r10+=[r17*r24].hi+c (r-3=>r10)
	"madc.lo.cc.u32	%11,%14,%29,%11;\n\t"	//r11+=[r14*r29].lo+c (r-2=>r11)
	"madc.lo.cc.u32	%12,%16,%28,%12;\n\t"	//r12+=[r16*r28].lo+c (r-1=>r12)
	"madc.lo.cc.u32	%13,%18,%27,%13;\n\t"	//r13+=[r18*r27].lo+c
	"madc.lo.cc.u32	 %0,%19,%27, %0;\n\t"	// r0+=[r19*r27].lo+c
	"madc.lo.cc.u32	 %1,%20,%27, %1;\n\t"	// r1+=[r20*r27].lo+c
	"madc.lo.cc.u32	 %2,%21,%27, %2;\n\t"	// r2+=[r21*r27].lo+c
	"madc.lo.u32	 %3,%22,%27,  0;\n\t"	// r3 =[r22*r27].lo+c
	"mad.hi.cc.u32	%10,%16,%25,%10;\n\t"	//r10+=[r16*r25].hi   (r-3=>r10)
	"madc.hi.cc.u32	%11,%19,%23,%11;\n\t"	//r11+=[r19*r23].hi+c (r-2=>r11)
	"madc.lo.cc.u32	%12,%15,%29,%12;\n\t"	//r12+=[r15*r29].lo+c (r-1=>r12)
	"madc.lo.cc.u32	%13,%17,%28,%13;\n\t"	//r13+=[r17*r28].lo+c
	"madc.lo.cc.u32	 %0,%18,%28, %0;\n\t"	// r0+=[r18*r28].lo+c
	"madc.lo.cc.u32	 %1,%19,%28, %1;\n\t"	// r1+=[r19*r28].lo+c
	"madc.lo.cc.u32	 %2,%20,%28, %2;\n\t"	// r2+=[r20*r28].lo+c
	"madc.lo.cc.u32	 %3,%21,%28, %3;\n\t"	// r3+=[r21*r28].lo+c
	"madc.lo.u32	 %4,%22,%28,  0;\n\t"	// r4 =[r22*r28].lo+c
	"mad.hi.cc.u32	%10,%15,%26,%10;\n\t"	//r10+=[r15*r26].hi   (r-3=>r10)
	"madc.hi.cc.u32	%11,%18,%24,%11;\n\t"	//r11+=[r18*r24].hi+c (r-2=>r11)
	"madc.lo.cc.u32	%12,%14,%30,%12;\n\t"	//r12+=[r14*r30].lo+c (r-1=>r12)
	"madc.lo.cc.u32	%13,%16,%29,%13;\n\t"	//r13+=[r16*r29].lo+c
	"madc.lo.cc.u32	 %0,%17,%29, %0;\n\t"	// r0+=[r17*r29].lo+c
	"madc.lo.cc.u32	 %1,%18,%29, %1;\n\t"	// r1+=[r18*r29].lo+c
	"madc.lo.cc.u32	 %2,%19,%29, %2;\n\t"	// r2+=[r19*r29].lo+c
	"madc.lo.cc.u32	 %3,%20,%29, %3;\n\t"	// r3+=[r20*r29].lo+c
	"madc.lo.cc.u32	 %4,%21,%29, %4;\n\t"	// r4+=[r21*r29].lo+c
	"madc.lo.u32	 %5,%22,%29,  0;\n\t"	// r5 =[r22*r29].lo+c
	"mad.hi.cc.u32	%10,%14,%27,%10;\n\t"	//r10+=[r14*r27].hi   (r-3=>r10)
	"madc.hi.cc.u32	%11,%17,%25,%11;\n\t"	//r11+=[r17*r25].hi+c (r-2=>r11)
	"madc.hi.cc.u32	%12,%20,%23,%12;\n\t"	//r12+=[r20*r23].hi+c (r-1=>r12)
	"madc.lo.cc.u32	%13,%15,%30,%13;\n\t"	//r13+=[r15*r30].lo+c
	"madc.lo.cc.u32	 %0,%16,%30, %0;\n\t"	// r0+=[r16*r30].lo+c
	"madc.lo.cc.u32	 %1,%17,%30, %1;\n\t"	// r1+=[r17*r30].lo+c
	"madc.lo.cc.u32	 %2,%18,%30, %2;\n\t"	// r2+=[r18*r30].lo+c
	"madc.lo.cc.u32	 %3,%19,%30, %3;\n\t"	// r3+=[r19*r30].lo+c
	"madc.lo.cc.u32	 %4,%20,%30, %4;\n\t"	// r4+=[r20*r30].lo+c
	"madc.lo.cc.u32	 %5,%21,%30, %5;\n\t"	// r5+=[r21*r30].lo+c
	"madc.lo.u32	 %6,%22,%30,  0;\n\t"	// r6 =[r22*r30].lo+c
	"mad.hi.cc.u32	%11,%16,%26,%11;\n\t"	//r11+=[r16*r26].hi   (r-2=>r11)
	"madc.hi.cc.u32	%12,%19,%24,%12;\n\t"	//r12+=[r19*r24].hi+c (r-1=>r12)
	"madc.hi.cc.u32	%13,%21,%23,%13;\n\t"	//r13+=[r21*r23].hi+c
	"madc.hi.cc.u32	 %0,%22,%23, %0;\n\t"	// r0+=[r22*r23].hi+c
	"madc.hi.cc.u32	 %1,%22,%24, %1;\n\t"	// r1+=[r22*r24].hi+c
	"madc.hi.cc.u32	 %2,%22,%25, %2;\n\t"	// r2+=[r22*r25].hi+c
	"madc.hi.cc.u32	 %3,%22,%26, %3;\n\t"	// r3+=[r22*r26].hi+c
	"madc.hi.cc.u32	 %4,%22,%27, %4;\n\t"	// r4+=[r22*r27].hi+c
	"madc.hi.cc.u32	 %5,%22,%28, %5;\n\t"	// r5+=[r22*r28].hi+c
	"madc.hi.cc.u32	 %6,%22,%29, %6;\n\t"	// r6+=[r22*r29].hi+c
	"madc.hi.u32	 %7,%22,%30,  0;\n\t"	// r7 =[r22*r30].hi+c
	"mad.hi.cc.u32	%11,%15,%27,%11;\n\t"	//r11+=[r15*r27].hi   (r-2=>r11)
	"madc.hi.cc.u32	%12,%18,%25,%12;\n\t"	//r12+=[r18*r25].hi+c (r-1=>r12)
	"madc.hi.cc.u32	%13,%20,%24,%13;\n\t"	//r13+=[r20*r24].hi+c
	"madc.hi.cc.u32	 %0,%21,%24, %0;\n\t"	// r0+=[r21*r24].hi+c
	"madc.hi.cc.u32	 %1,%21,%25, %1;\n\t"	// r1+=[r21*r25].hi+c
	"madc.hi.cc.u32	 %2,%21,%26, %2;\n\t"	// r2+=[r21*r26].hi+c
	"madc.hi.cc.u32	 %3,%21,%27, %3;\n\t"	// r3+=[r21*r27].hi+c
	"madc.hi.cc.u32	 %4,%21,%28, %4;\n\t"	// r4+=[r21*r28].hi+c
	"madc.hi.cc.u32	 %5,%21,%29, %5;\n\t"	// r5+=[r21*r29].hi+c
	"madc.hi.cc.u32	 %6,%21,%30, %6;\n\t"	// r6+=[r21*r30].hi+c
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+= c
	"addc.u32	 %8,  0,  0    ;\n\t"	// r8 = c
	"mad.hi.cc.u32	%11,%14,%28,%11;\n\t"	//r11+=[r14*r28].hi   (r-2=>r11)
	"madc.hi.cc.u32	%12,%17,%26,%12;\n\t"	//r12+=[r17*r26].hi+c (r-1=>r12)
	"madc.hi.cc.u32	%13,%19,%25,%13;\n\t"	//r13+=[r19*r25].hi+c
	"madc.hi.cc.u32	 %0,%20,%25, %0;\n\t"	// r0+=[r20*r25].hi+c
	"madc.hi.cc.u32	 %1,%20,%26, %1;\n\t"	// r1+=[r20*r26].hi+c
	"madc.hi.cc.u32	 %2,%20,%27, %2;\n\t"	// r2+=[r20*r27].hi+c
	"madc.hi.cc.u32	 %3,%20,%28, %3;\n\t"	// r3+=[r20*r28].hi+c
	"madc.hi.cc.u32	 %4,%20,%29, %4;\n\t"	// r4+=[r20*r29].hi+c
	"madc.hi.cc.u32	 %5,%20,%30, %5;\n\t"	// r5+=[r20*r30].hi+c
	"addc.cc.u32	 %6, %6,  0    ;\n\t"	// r6+= c
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+= c
	"addc.u32	 %8, %8,  0    ;\n\t"	// r8+= c
	"mad.hi.cc.u32	%12,%16,%27,%12;\n\t"	//r12+=[r16*r27].hi   (r-1=>r12)
	"madc.hi.cc.u32	%13,%18,%26,%13;\n\t"	//r13+=[r18*r26].hi+c
	"madc.hi.cc.u32	 %0,%19,%26, %0;\n\t"	// r0+=[r19*r26].hi+c
	"madc.hi.cc.u32	 %1,%19,%27, %1;\n\t"	// r1+=[r19*r27].hi+c
	"madc.hi.cc.u32	 %2,%19,%28, %2;\n\t"	// r2+=[r19*r28].hi+c
	"madc.hi.cc.u32	 %3,%19,%29, %3;\n\t"	// r3+=[r19*r29].hi+c
	"madc.hi.cc.u32	 %4,%19,%30, %4;\n\t"	// r4+=[r19*r30].hi+c
	"addc.cc.u32	 %5, %5,  0    ;\n\t"	// r5+= c
	"addc.cc.u32	 %6, %6,  0    ;\n\t"	// r6+= c
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+= c
	"addc.u32	 %8, %8,  0    ;\n\t"	// r8+= c
	"mad.hi.cc.u32	%12,%15,%28,%12;\n\t"	//r12+=[r15*r28].hi   (r-1=>r12)
	"madc.hi.cc.u32	%13,%17,%27,%13;\n\t"	//r13+=[r17*r27].hi+c
	"madc.hi.cc.u32	 %0,%18,%27, %0;\n\t"	// r0+=[r18*r27].hi+c
	"madc.hi.cc.u32	 %1,%18,%28, %1;\n\t"	// r1+=[r18*r28].hi+c
	"madc.hi.cc.u32	 %2,%18,%29, %2;\n\t"	// r2+=[r18*r29].hi+c
	"madc.hi.cc.u32	 %3,%18,%30, %3;\n\t"	// r3+=[r18*r30].hi+c
	"addc.cc.u32	 %4, %4,  0    ;\n\t"	// r4+= c
	"addc.cc.u32	 %5, %5,  0    ;\n\t"	// r5+= c
	"addc.cc.u32	 %6, %6,  0    ;\n\t"	// r6+= c
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+= c
	"addc.u32	 %8, %8,  0    ;\n\t"	// r8+= c
	"mad.hi.cc.u32	%12,%14,%29,%12;\n\t"	//r12+=[r14*r29].hi   (r-1=>r12)
	"madc.hi.cc.u32	%13,%16,%28,%13;\n\t"	//r13+=[r16*r28].hi+c
	"madc.hi.cc.u32	 %0,%17,%28, %0;\n\t"	// r0+=[r17*r28].hi+c
	"madc.hi.cc.u32	 %1,%17,%29, %1;\n\t"	// r1+=[r17*r29].hi+c
	"madc.hi.cc.u32	 %2,%17,%30, %2;\n\t"	// r2+=[r17*r30].hi+c
	"addc.cc.u32	 %3, %3,  0    ;\n\t"	// r3+= c
	"addc.cc.u32	 %4, %4,  0    ;\n\t"	// r4+= c
	"addc.cc.u32	 %5, %5,  0    ;\n\t"	// r5+= c
	"addc.cc.u32	 %6, %6,  0    ;\n\t"	// r6+= c
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+= c
	"addc.u32	 %8, %8,  0    ;\n\t"	// r8+= c
	"mad.hi.cc.u32	%13,%15,%29,%13;\n\t"	//r13+=[r15*r29].hi  
	"madc.hi.cc.u32	 %0,%16,%29, %0;\n\t"	// r0+=[r16*r29].hi+c
	"madc.hi.cc.u32	 %1,%16,%30, %1;\n\t"	// r1+=[r16*r30].hi+c
	"addc.cc.u32	 %2, %2,  0    ;\n\t"	// r2+= c
	"addc.cc.u32	 %3, %3,  0    ;\n\t"	// r3+= c
	"addc.cc.u32	 %4, %4,  0    ;\n\t"	// r4+= c
	"addc.cc.u32	 %5, %5,  0    ;\n\t"	// r5+= c
	"addc.cc.u32	 %6, %6,  0    ;\n\t"	// r6+= c
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+= c
	"addc.u32	 %8, %8,  0    ;\n\t"	// r8+= c
	"mad.hi.cc.u32	%13,%14,%30,%13;\n\t"	//r13+=[r14*r30].hi  
	"madc.hi.cc.u32	 %0,%15,%30, %0;\n\t"	// r0+=[r15*r30].hi+c
	"addc.cc.u32	 %1, %1,  0    ;\n\t"	// r1+= c
	"addc.cc.u32	 %2, %2,  0    ;\n\t"	// r2+= c
	"addc.cc.u32	 %3, %3,  0    ;\n\t"	// r3+= c
	"addc.cc.u32	 %4, %4,  0    ;\n\t"	// r4+= c
	"addc.cc.u32	 %5, %5,  0    ;\n\t"	// r5+= c
	"addc.cc.u32	 %6, %6,  0    ;\n\t"	// r6+= c
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+= c
	"addc.u32	 %8, %8,  0    ;\n\t"	// r8+= c
	"add.cc.u32	%13,%13,%14    ;\n\t"	//r13+=r14
	"addc.cc.u32	 %0, %0,%15    ;\n\t"	// r0+=r15+c
	"addc.cc.u32	 %1, %1,%16    ;\n\t"	// r1+=r16+c
	"addc.cc.u32	 %2, %2,%17    ;\n\t"	// r2+=r17+c
	"addc.cc.u32	 %3, %3,%18    ;\n\t"	// r3+=r18+c
	"addc.cc.u32	 %4, %4,%19    ;\n\t"	// r4+=r19+c
	"addc.cc.u32	 %5, %5,%20    ;\n\t"	// r5+=r20+c
	"addc.cc.u32	 %6, %6,%21    ;\n\t"	// r6+=r21+c
	"addc.cc.u32	 %7, %7,%22    ;\n\t"	// r7+=r22+c
	"addc.u32	 %8, %8,  0    ;\n\t"	// r8+=c
	: "+r"(_q[0]), "=r"(_q[1]), "=r"(_q[2]), "=r"(_q[3]), "=r"(_q[4]),
	  "=r"(_q[5]), "=r"(_q[6]), "=r"(_q[7]), "=r"(_q[8]), "=r"(tmp0),
	  "=r"(tmp1), "=r"(tmp2), "=r"(tmp3), "=r"(tmp4)
	: "r"(_a_lo[7]), "r"(_a_hi[0]), "r"(_a_hi[1]), "r"(_a_hi[2]),
	  "r"(_a_hi[3]), "r"(_a_hi[4]), "r"(_a_hi[5]), "r"(_a_hi[6]),
	  "r"(_a_hi[7]), "r"(_mu[0]), "r"(_mu[1]), "r"(_mu[2]), "r"(_mu[3]),
	  "r"(_mu[4]), "r"(_mu[5]), "r"(_mu[6]), "r"(_mu[7]));

    return q;
}

__device__ __forceinline__ uintXp<uint256> get_r2(const uintXp<uint256> & q,
	const uint256 & modulus)
{
    uintXp<uint256> r;
    uint * _r = (uint *)&r;
    uint * _q = (uint *)&q;
    uint * _m = (uint *)&modulus;

    asm("mad.lo.u32	 %0, %9,%18,  0;\n\t"	// r0 =[ r9*r18].lo  
	"mad.lo.u32	 %1, %9,%19,  0;\n\t"	// r1 =[ r9*r19].lo  
	"mad.lo.cc.u32	 %1,%10,%18, %1;\n\t"	// r1+=[r10*r18].lo  
	"madc.lo.u32	 %2, %9,%20,  0;\n\t"	// r2 =[ r9*r20].lo+c
	"mad.hi.cc.u32	 %1, %9,%18, %1;\n\t"	// r1+=[ r9*r18].hi  
	"madc.lo.cc.u32	 %2,%10,%19, %2;\n\t"	// r2+=[r10*r19].lo+c
	"madc.lo.u32	 %3, %9,%21,  0;\n\t"	// r3 =[ r9*r21].lo+c
	"mad.hi.cc.u32	 %2, %9,%19, %2;\n\t"	// r2+=[ r9*r19].hi  
	"madc.lo.cc.u32	 %3,%10,%20, %3;\n\t"	// r3+=[r10*r20].lo+c
	"madc.lo.u32	 %4, %9,%22,  0;\n\t"	// r4 =[ r9*r22].lo+c
	"mad.lo.cc.u32	 %2,%11,%18, %2;\n\t"	// r2+=[r11*r18].lo  
	"madc.hi.cc.u32	 %3, %9,%20, %3;\n\t"	// r3+=[ r9*r20].hi+c
	"madc.lo.cc.u32	 %4,%10,%21, %4;\n\t"	// r4+=[r10*r21].lo+c
	"madc.lo.u32	 %5, %9,%23,  0;\n\t"	// r5 =[ r9*r23].lo+c
	"mad.hi.cc.u32	 %2,%10,%18, %2;\n\t"	// r2+=[r10*r18].hi  
	"madc.lo.cc.u32	 %3,%11,%19, %3;\n\t"	// r3+=[r11*r19].lo+c
	"madc.hi.cc.u32	 %4, %9,%21, %4;\n\t"	// r4+=[ r9*r21].hi+c
	"madc.lo.cc.u32	 %5,%10,%22, %5;\n\t"	// r5+=[r10*r22].lo+c
	"madc.lo.u32	 %6, %9,%24,  0;\n\t"	// r6 =[ r9*r24].lo+c
	"mad.hi.cc.u32	 %3,%10,%19, %3;\n\t"	// r3+=[r10*r19].hi  
	"madc.lo.cc.u32	 %4,%11,%20, %4;\n\t"	// r4+=[r11*r20].lo+c
	"madc.hi.cc.u32	 %5, %9,%22, %5;\n\t"	// r5+=[ r9*r22].hi+c
	"madc.lo.cc.u32	 %6,%10,%23, %6;\n\t"	// r6+=[r10*r23].lo+c
	"madc.lo.u32	 %7, %9,%25,  0;\n\t"	// r7 =[ r9*r25].lo+c
	"mad.lo.cc.u32	 %3,%12,%18, %3;\n\t"	// r3+=[r12*r18].lo  
	"madc.hi.cc.u32	 %4,%10,%20, %4;\n\t"	// r4+=[r10*r20].hi+c
	"madc.lo.cc.u32	 %5,%11,%21, %5;\n\t"	// r5+=[r11*r21].lo+c
	"madc.hi.cc.u32	 %6, %9,%23, %6;\n\t"	// r6+=[ r9*r23].hi+c
	"madc.lo.cc.u32	 %7,%10,%24, %7;\n\t"	// r7+=[r10*r24].lo+c
	"madc.lo.u32	 %8,%10,%25, %8;\n\t"	// r8+=[r10*r25].lo+c
	"mad.hi.cc.u32	 %3,%11,%18, %3;\n\t"	// r3+=[r11*r18].hi  
	"madc.lo.cc.u32	 %4,%12,%19, %4;\n\t"	// r4+=[r12*r19].lo+c
	"madc.hi.cc.u32	 %5,%10,%21, %5;\n\t"	// r5+=[r10*r21].hi+c
	"madc.lo.cc.u32	 %6,%11,%22, %6;\n\t"	// r6+=[r11*r22].lo+c
	"madc.hi.cc.u32	 %7, %9,%24, %7;\n\t"	// r7+=[ r9*r24].hi+c
	"madc.hi.cc.u32	 %8, %9,%25, %8;\n\t"	// r8+=[ r9*r25].hi+c
	"mad.hi.cc.u32	 %4,%11,%19, %4;\n\t"	// r4+=[r11*r19].hi  
	"madc.lo.cc.u32	 %5,%12,%20, %5;\n\t"	// r5+=[r12*r20].lo+c
	"madc.hi.cc.u32	 %6,%10,%22, %6;\n\t"	// r6+=[r10*r22].hi+c
	"madc.lo.cc.u32	 %7,%11,%23, %7;\n\t"	// r7+=[r11*r23].lo+c
	"madc.lo.cc.u32	 %8,%11,%24, %8;\n\t"	// r8+=[r11*r24].lo+c
	"mad.lo.cc.u32	 %4,%13,%18, %4;\n\t"	// r4+=[r13*r18].lo  
	"madc.hi.cc.u32	 %5,%11,%20, %5;\n\t"	// r5+=[r11*r20].hi+c
	"madc.lo.cc.u32	 %6,%12,%21, %6;\n\t"	// r6+=[r12*r21].lo+c
	"madc.hi.cc.u32	 %7,%10,%23, %7;\n\t"	// r7+=[r10*r23].hi+c
	"madc.hi.cc.u32	 %8,%10,%24, %8;\n\t"	// r8+=[r10*r24].hi+c
	"mad.hi.cc.u32	 %4,%12,%18, %4;\n\t"	// r4+=[r12*r18].hi  
	"madc.lo.cc.u32	 %5,%13,%19, %5;\n\t"	// r5+=[r13*r19].lo+c
	"madc.hi.cc.u32	 %6,%11,%21, %6;\n\t"	// r6+=[r11*r21].hi+c
	"madc.lo.cc.u32	 %7,%12,%22, %7;\n\t"	// r7+=[r12*r22].lo+c
	"madc.lo.cc.u32	 %8,%12,%23, %8;\n\t"	// r8+=[r12*r23].lo+c
	"mad.hi.cc.u32	 %5,%12,%19, %5;\n\t"	// r5+=[r12*r19].hi  
	"madc.lo.cc.u32	 %6,%13,%20, %6;\n\t"	// r6+=[r13*r20].lo+c
	"madc.hi.cc.u32	 %7,%11,%22, %7;\n\t"	// r7+=[r11*r22].hi+c
	"madc.hi.cc.u32	 %8,%11,%23, %8;\n\t"	// r8+=[r11*r23].hi+c
	"mad.lo.cc.u32	 %5,%14,%18, %5;\n\t"	// r5+=[r14*r18].lo  
	"madc.hi.cc.u32	 %6,%12,%20, %6;\n\t"	// r6+=[r12*r20].hi+c
	"madc.lo.cc.u32	 %7,%13,%21, %7;\n\t"	// r7+=[r13*r21].lo+c
	"madc.lo.cc.u32	 %8,%13,%22, %8;\n\t"	// r8+=[r13*r22].lo+c
	"mad.hi.cc.u32	 %5,%13,%18, %5;\n\t"	// r5+=[r13*r18].hi  
	"madc.lo.cc.u32	 %6,%14,%19, %6;\n\t"	// r6+=[r14*r19].lo+c
	"madc.hi.cc.u32	 %7,%12,%21, %7;\n\t"	// r7+=[r12*r21].hi+c
	"madc.hi.cc.u32	 %8,%12,%22, %8;\n\t"	// r8+=[r12*r22].hi+c
	"mad.hi.cc.u32	 %6,%13,%19, %6;\n\t"	// r6+=[r13*r19].hi  
	"madc.lo.cc.u32	 %7,%14,%20, %7;\n\t"	// r7+=[r14*r20].lo+c
	"madc.lo.cc.u32	 %8,%14,%21, %8;\n\t"	// r8+=[r14*r21].lo+c
	"mad.lo.cc.u32	 %6,%15,%18, %6;\n\t"	// r6+=[r15*r18].lo  
	"madc.hi.cc.u32	 %7,%13,%20, %7;\n\t"	// r7+=[r13*r20].hi+c
	"madc.hi.cc.u32	 %8,%13,%21, %8;\n\t"	// r8+=[r13*r21].hi+c
	"mad.hi.cc.u32	 %6,%14,%18, %6;\n\t"	// r6+=[r14*r18].hi  
	"madc.lo.cc.u32	 %7,%15,%19, %7;\n\t"	// r7+=[r15*r19].lo+c
	"madc.lo.cc.u32	 %8,%15,%20, %8;\n\t"	// r8+=[r15*r20].lo+c
	"mad.hi.cc.u32	 %7,%14,%19, %7;\n\t"	// r7+=[r14*r19].hi  
	"madc.hi.cc.u32	 %8,%14,%20, %8;\n\t"	// r8+=[r14*r20].hi+c
	"mad.lo.cc.u32	 %7,%16,%18, %7;\n\t"	// r7+=[r16*r18].lo  
	"madc.lo.cc.u32	 %8,%16,%19, %8;\n\t"	// r8+=[r16*r19].lo+c
	"mad.hi.cc.u32	 %7,%15,%18, %7;\n\t"	// r7+=[r15*r18].hi  
	"madc.hi.cc.u32	 %8,%15,%19, %8;\n\t"	// r8+=[r15*r19].hi+c
	"mad.lo.cc.u32	 %8,%17,%18, %8;\n\t"	// r8+=[r17*r18].lo  
	"mad.hi.cc.u32	 %8,%16,%18, %8;\n\t"	// r8+=[r16*r18].hi  
	: "+r"(_r[0]), "=r"(_r[1]), "=r"(_r[2]), "=r"(_r[3]), "=r"(_r[4]),
	  "=r"(_r[5]), "=r"(_r[6]), "=r"(_r[7]), "=r"(_r[8])
	: "r"(_q[0]), "r"(_q[1]), "r"(_q[2]), "r"(_q[3]), "r"(_q[4]),
	  "r"(_q[5]), "r"(_q[6]), "r"(_q[7]), "r"(_q[8]), "r"(_m[0]),
	  "r"(_m[1]), "r"(_m[2]), "r"(_m[3]), "r"(_m[4]), "r"(_m[5]),
	  "r"(_m[6]), "r"(_m[7]));

    return r;
}

__device__ __forceinline__ void mad(uint256 & a_lo, uint256 & a_hi,
	uint & overflow, const uint256 & b, const uint256 & c)
{
    uint * _a_lo = (uint *)&a_lo;
    uint * _a_hi = (uint *)&a_hi;
    const uint * _b = (uint *)&b;
    const uint * _c = (uint *)&c;

    asm("mad.lo.cc.u32	 %0,%17,%25, %0;\n\t"	// r0+=[r17*r25].lo  
	"madc.hi.cc.u32	 %1,%17,%25, %1;\n\t"	// r1+=[r17*r25].hi  
	"madc.lo.cc.u32	 %2,%19,%25, %2;\n\t"	// r2+=[r19*r25].lo+c
	"madc.hi.cc.u32	 %3,%19,%25, %3;\n\t"	// r3+=[r19*r25].hi+c
	"madc.lo.cc.u32	 %4,%21,%25, %4;\n\t"	// r4+=[r21*r25].lo+c
	"madc.hi.cc.u32	 %5,%21,%25, %5;\n\t"	// r5+=[r21*r25].hi+c
	"madc.lo.cc.u32	 %6,%23,%25, %6;\n\t"	// r6+=[r23*r25].lo+c
	"madc.hi.cc.u32	 %7,%23,%25, %7;\n\t"	// r7+=[r23*r25].hi+c
	"madc.lo.cc.u32	 %8,%24,%26, %8;\n\t"	// r8+=[r24*r26].lo+c
	"madc.hi.cc.u32	 %9,%24,%26, %9;\n\t"	// r9+=[r24*r26].hi+c
	"madc.lo.cc.u32	%10,%24,%28,%10;\n\t"	//r10+=[r24*r28].lo+c
	"madc.hi.cc.u32	%11,%24,%28,%11;\n\t"	//r11+=[r24*r28].hi+c
	"madc.lo.cc.u32	%12,%24,%30,%12;\n\t"	//r12+=[r24*r30].lo+c
	"madc.hi.cc.u32	%13,%24,%30,%13;\n\t"	//r13+=[r24*r30].hi+c
	"madc.lo.cc.u32	%14,%24,%32,%14;\n\t"	//r14+=[r24*r32].lo+c
	"madc.hi.cc.u32	%15,%24,%32,%15;\n\t"	//r15+=[r24*r32].hi+c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %1,%18,%25, %1;\n\t"	// r1+=[r18*r25].lo  
	"madc.hi.cc.u32	 %2,%18,%25, %2;\n\t"	// r2+=[r18*r25].hi  
	"madc.lo.cc.u32	 %3,%20,%25, %3;\n\t"	// r3+=[r20*r25].lo+c
	"madc.hi.cc.u32	 %4,%20,%25, %4;\n\t"	// r4+=[r20*r25].hi+c
	"madc.lo.cc.u32	 %5,%22,%25, %5;\n\t"	// r5+=[r22*r25].lo+c
	"madc.hi.cc.u32	 %6,%22,%25, %6;\n\t"	// r6+=[r22*r25].hi+c
	"madc.lo.cc.u32	 %7,%24,%25, %7;\n\t"	// r7+=[r24*r25].lo+c
	"madc.hi.cc.u32	 %8,%24,%25, %8;\n\t"	// r8+=[r24*r25].hi+c
	"madc.lo.cc.u32	 %9,%24,%27, %9;\n\t"	// r9+=[r24*r27].lo+c
	"madc.hi.cc.u32	%10,%24,%27,%10;\n\t"	//r10+=[r24*r27].hi+c
	"madc.lo.cc.u32	%11,%24,%29,%11;\n\t"	//r11+=[r24*r29].lo+c
	"madc.hi.cc.u32	%12,%24,%29,%12;\n\t"	//r12+=[r24*r29].hi+c
	"madc.lo.cc.u32	%13,%24,%31,%13;\n\t"	//r13+=[r24*r31].lo+c
	"madc.hi.cc.u32	%14,%24,%31,%14;\n\t"	//r14+=[r24*r31].hi+c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %1,%17,%26, %1;\n\t"	// r1+=[r17*r26].lo  
	"madc.hi.cc.u32	 %2,%17,%26, %2;\n\t"	// r2+=[r17*r26].hi  
	"madc.lo.cc.u32	 %3,%19,%26, %3;\n\t"	// r3+=[r19*r26].lo+c
	"madc.hi.cc.u32	 %4,%19,%26, %4;\n\t"	// r4+=[r19*r26].hi+c
	"madc.lo.cc.u32	 %5,%21,%26, %5;\n\t"	// r5+=[r21*r26].lo+c
	"madc.hi.cc.u32	 %6,%21,%26, %6;\n\t"	// r6+=[r21*r26].hi+c
	"madc.lo.cc.u32	 %7,%23,%26, %7;\n\t"	// r7+=[r23*r26].lo+c
	"madc.hi.cc.u32	 %8,%23,%26, %8;\n\t"	// r8+=[r23*r26].hi+c
	"madc.lo.cc.u32	 %9,%23,%28, %9;\n\t"	// r9+=[r23*r28].lo+c
	"madc.hi.cc.u32	%10,%23,%28,%10;\n\t"	//r10+=[r23*r28].hi+c
	"madc.lo.cc.u32	%11,%23,%30,%11;\n\t"	//r11+=[r23*r30].lo+c
	"madc.hi.cc.u32	%12,%23,%30,%12;\n\t"	//r12+=[r23*r30].hi+c
	"madc.lo.cc.u32	%13,%23,%32,%13;\n\t"	//r13+=[r23*r32].lo+c
	"madc.hi.cc.u32	%14,%23,%32,%14;\n\t"	//r14+=[r23*r32].hi+c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %2,%18,%26, %2;\n\t"	// r2+=[r18*r26].lo  
	"madc.hi.cc.u32	 %3,%18,%26, %3;\n\t"	// r3+=[r18*r26].hi  
	"madc.lo.cc.u32	 %4,%20,%26, %4;\n\t"	// r4+=[r20*r26].lo+c
	"madc.hi.cc.u32	 %5,%20,%26, %5;\n\t"	// r5+=[r20*r26].hi+c
	"madc.lo.cc.u32	 %6,%22,%26, %6;\n\t"	// r6+=[r22*r26].lo+c
	"madc.hi.cc.u32	 %7,%22,%26, %7;\n\t"	// r7+=[r22*r26].hi+c
	"madc.lo.cc.u32	 %8,%23,%27, %8;\n\t"	// r8+=[r23*r27].lo+c
	"madc.hi.cc.u32	 %9,%23,%27, %9;\n\t"	// r9+=[r23*r27].hi+c
	"madc.lo.cc.u32	%10,%23,%29,%10;\n\t"	//r10+=[r23*r29].lo+c
	"madc.hi.cc.u32	%11,%23,%29,%11;\n\t"	//r11+=[r23*r29].hi+c
	"madc.lo.cc.u32	%12,%23,%31,%12;\n\t"	//r12+=[r23*r31].lo+c
	"madc.hi.cc.u32	%13,%23,%31,%13;\n\t"	//r13+=[r23*r31].hi+c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %2,%17,%27, %2;\n\t"	// r2+=[r17*r27].lo  
	"madc.hi.cc.u32	 %3,%17,%27, %3;\n\t"	// r3+=[r17*r27].hi  
	"madc.lo.cc.u32	 %4,%19,%27, %4;\n\t"	// r4+=[r19*r27].lo+c
	"madc.hi.cc.u32	 %5,%19,%27, %5;\n\t"	// r5+=[r19*r27].hi+c
	"madc.lo.cc.u32	 %6,%21,%27, %6;\n\t"	// r6+=[r21*r27].lo+c
	"madc.hi.cc.u32	 %7,%21,%27, %7;\n\t"	// r7+=[r21*r27].hi+c
	"madc.lo.cc.u32	 %8,%22,%28, %8;\n\t"	// r8+=[r22*r28].lo+c
	"madc.hi.cc.u32	 %9,%22,%28, %9;\n\t"	// r9+=[r22*r28].hi+c
	"madc.lo.cc.u32	%10,%22,%30,%10;\n\t"	//r10+=[r22*r30].lo+c
	"madc.hi.cc.u32	%11,%22,%30,%11;\n\t"	//r11+=[r22*r30].hi+c
	"madc.lo.cc.u32	%12,%22,%32,%12;\n\t"	//r12+=[r22*r32].lo+c
	"madc.hi.cc.u32	%13,%22,%32,%13;\n\t"	//r13+=[r22*r32].hi+c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %3,%18,%27, %3;\n\t"	// r3+=[r18*r27].lo  
	"madc.hi.cc.u32	 %4,%18,%27, %4;\n\t"	// r4+=[r18*r27].hi  
	"madc.lo.cc.u32	 %5,%20,%27, %5;\n\t"	// r5+=[r20*r27].lo+c
	"madc.hi.cc.u32	 %6,%20,%27, %6;\n\t"	// r6+=[r20*r27].hi+c
	"madc.lo.cc.u32	 %7,%22,%27, %7;\n\t"	// r7+=[r22*r27].lo+c
	"madc.hi.cc.u32	 %8,%22,%27, %8;\n\t"	// r8+=[r22*r27].hi+c
	"madc.lo.cc.u32	 %9,%22,%29, %9;\n\t"	// r9+=[r22*r29].lo+c
	"madc.hi.cc.u32	%10,%22,%29,%10;\n\t"	//r10+=[r22*r29].hi+c
	"madc.lo.cc.u32	%11,%22,%31,%11;\n\t"	//r11+=[r22*r31].lo+c
	"madc.hi.cc.u32	%12,%22,%31,%12;\n\t"	//r12+=[r22*r31].hi+c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %3,%17,%28, %3;\n\t"	// r3+=[r17*r28].lo  
	"madc.hi.cc.u32	 %4,%17,%28, %4;\n\t"	// r4+=[r17*r28].hi  
	"madc.lo.cc.u32	 %5,%19,%28, %5;\n\t"	// r5+=[r19*r28].lo+c
	"madc.hi.cc.u32	 %6,%19,%28, %6;\n\t"	// r6+=[r19*r28].hi+c
	"madc.lo.cc.u32	 %7,%21,%28, %7;\n\t"	// r7+=[r21*r28].lo+c
	"madc.hi.cc.u32	 %8,%21,%28, %8;\n\t"	// r8+=[r21*r28].hi+c
	"madc.lo.cc.u32	 %9,%21,%30, %9;\n\t"	// r9+=[r21*r30].lo+c
	"madc.hi.cc.u32	%10,%21,%30,%10;\n\t"	//r10+=[r21*r30].hi+c
	"madc.lo.cc.u32	%11,%21,%32,%11;\n\t"	//r11+=[r21*r32].lo+c
	"madc.hi.cc.u32	%12,%21,%32,%12;\n\t"	//r12+=[r21*r32].hi+c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %4,%18,%28, %4;\n\t"	// r4+=[r18*r28].lo  
	"madc.hi.cc.u32	 %5,%18,%28, %5;\n\t"	// r5+=[r18*r28].hi  
	"madc.lo.cc.u32	 %6,%20,%28, %6;\n\t"	// r6+=[r20*r28].lo+c
	"madc.hi.cc.u32	 %7,%20,%28, %7;\n\t"	// r7+=[r20*r28].hi+c
	"madc.lo.cc.u32	 %8,%21,%29, %8;\n\t"	// r8+=[r21*r29].lo+c
	"madc.hi.cc.u32	 %9,%21,%29, %9;\n\t"	// r9+=[r21*r29].hi+c
	"madc.lo.cc.u32	%10,%21,%31,%10;\n\t"	//r10+=[r21*r31].lo+c
	"madc.hi.cc.u32	%11,%21,%31,%11;\n\t"	//r11+=[r21*r31].hi+c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %4,%17,%29, %4;\n\t"	// r4+=[r17*r29].lo  
	"madc.hi.cc.u32	 %5,%17,%29, %5;\n\t"	// r5+=[r17*r29].hi  
	"madc.lo.cc.u32	 %6,%19,%29, %6;\n\t"	// r6+=[r19*r29].lo+c
	"madc.hi.cc.u32	 %7,%19,%29, %7;\n\t"	// r7+=[r19*r29].hi+c
	"madc.lo.cc.u32	 %8,%20,%30, %8;\n\t"	// r8+=[r20*r30].lo+c
	"madc.hi.cc.u32	 %9,%20,%30, %9;\n\t"	// r9+=[r20*r30].hi+c
	"madc.lo.cc.u32	%10,%20,%32,%10;\n\t"	//r10+=[r20*r32].lo+c
	"madc.hi.cc.u32	%11,%20,%32,%11;\n\t"	//r11+=[r20*r32].hi+c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %5,%18,%29, %5;\n\t"	// r5+=[r18*r29].lo  
	"madc.hi.cc.u32	 %6,%18,%29, %6;\n\t"	// r6+=[r18*r29].hi  
	"madc.lo.cc.u32	 %7,%20,%29, %7;\n\t"	// r7+=[r20*r29].lo+c
	"madc.hi.cc.u32	 %8,%20,%29, %8;\n\t"	// r8+=[r20*r29].hi+c
	"madc.lo.cc.u32	 %9,%20,%31, %9;\n\t"	// r9+=[r20*r31].lo+c
	"madc.hi.cc.u32	%10,%20,%31,%10;\n\t"	//r10+=[r20*r31].hi+c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %5,%17,%30, %5;\n\t"	// r5+=[r17*r30].lo  
	"madc.hi.cc.u32	 %6,%17,%30, %6;\n\t"	// r6+=[r17*r30].hi  
	"madc.lo.cc.u32	 %7,%19,%30, %7;\n\t"	// r7+=[r19*r30].lo+c
	"madc.hi.cc.u32	 %8,%19,%30, %8;\n\t"	// r8+=[r19*r30].hi+c
	"madc.lo.cc.u32	 %9,%19,%32, %9;\n\t"	// r9+=[r19*r32].lo+c
	"madc.hi.cc.u32	%10,%19,%32,%10;\n\t"	//r10+=[r19*r32].hi+c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %6,%18,%30, %6;\n\t"	// r6+=[r18*r30].lo  
	"madc.hi.cc.u32	 %7,%18,%30, %7;\n\t"	// r7+=[r18*r30].hi  
	"madc.lo.cc.u32	 %8,%19,%31, %8;\n\t"	// r8+=[r19*r31].lo+c
	"madc.hi.cc.u32	 %9,%19,%31, %9;\n\t"	// r9+=[r19*r31].hi+c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %6,%17,%31, %6;\n\t"	// r6+=[r17*r31].lo  
	"madc.hi.cc.u32	 %7,%17,%31, %7;\n\t"	// r7+=[r17*r31].hi  
	"madc.lo.cc.u32	 %8,%18,%32, %8;\n\t"	// r8+=[r18*r32].lo+c
	"madc.hi.cc.u32	 %9,%18,%32, %9;\n\t"	// r9+=[r18*r32].hi+c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %7,%18,%31, %7;\n\t"	// r7+=[r18*r31].lo  
	"madc.hi.cc.u32	 %8,%18,%31, %8;\n\t"	// r8+=[r18*r31].hi  
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	"mad.lo.cc.u32	 %7,%17,%32, %7;\n\t"	// r7+=[r17*r32].lo  
	"madc.hi.cc.u32	 %8,%17,%32, %8;\n\t"	// r8+=[r17*r32].hi  
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"addc.cc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	"addc.cc.u32	%14,%14,  0    ;\n\t"	//r14+=c
	"addc.cc.u32	%15,%15,  0    ;\n\t"	//r15+=c
	"addc.u32	%16,%16,  0    ;\n\t"	//r16+=c
	: "+r"(_a_lo[0]), "+r"(_a_lo[1]), "+r"(_a_lo[2]), "+r"(_a_lo[3]),
	  "+r"(_a_lo[4]), "+r"(_a_lo[5]), "+r"(_a_lo[6]), "+r"(_a_lo[7]),
	  "+r"(_a_hi[0]), "+r"(_a_hi[1]), "+r"(_a_hi[2]), "+r"(_a_hi[3]),
	  "+r"(_a_hi[4]), "+r"(_a_hi[5]), "+r"(_a_hi[6]), "+r"(_a_hi[7]),
	  "+r"(overflow)
	: "r"(_b[0]), "r"(_b[1]), "r"(_b[2]), "r"(_b[3]), "r"(_b[4]),
	  "r"(_b[5]), "r"(_b[6]), "r"(_b[7]), "r"(_c[0]), "r"(_c[1]),
	  "r"(_c[2]), "r"(_c[3]), "r"(_c[4]), "r"(_c[5]), "r"(_c[6]),
	  "r"(_c[7]));
}

#endif
