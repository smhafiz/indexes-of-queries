// This file was generated by BarretCUDA v0.1 
// 
// BarretCUDA is a fast(ish) CUDA implementation of sparse matrix
// multiplication modulo a multi-precision prime.
// 
// Copyright (C) 2016, Ryan Henry and Syed Mahbub Hafiz
// 
// 
// BarretCUDA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
// 
// BarretCUDA is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with BarretCUDA.  If not, see <http://www.gnu.org/licenses/>.

#ifndef __UINT_192_H
#define __UINT_192_H
#include "uint.h"

struct uint192
{
    uint128 w0; 				// limbs 0 to 3
    uint64  w4; 				// limbs 4 to 5
};

#ifndef __UINTX__
#define __UINTX__
    typedef uint192 uintX;
#endif

static inline uint192 make_uint192(const uint w0x, const uint w0y, const uint w0z, const uint w0w, const uint w1x, const uint w1y)
{
    uint192 res;

    uint * _res = (uint *)&res;
    _res[0]= w0x;				// res.w0.x= w0x
    _res[1]= w0y;				// res.w0.y= w0y
    _res[2]= w0z;				// res.w0.z= w0z
    _res[3]= w0w;				// res.w0.w= w0w
    _res[4]= w1x;				// res.w1.x= w1x
    _res[5]= w1y;				// res.w1.y= w1y

    return res;
}

static inline NTL::ZZ to_ZZ(const uint192 & n)
{
    return to_ZZ<uint192>(n);
}

static inline NTL::ZZ_p to_ZZ_p(const uint192 & n)
{
    return NTL::to_ZZ_p(to_ZZ<uint192>(n));
}

static inline uint192 to_uint192(const NTL::ZZ & n)
{
    return to_uint<uint192>(n);
}

__device__ __forceinline__ void normalize(const uint192 & aLo, const uint192 & aHi, const uint2X<uint192> & s)
{
    uint * _aLo = (uint *)&aLo;
    uint * _aHi = (uint *)&aHi;
    const uint * _s = (uint *)&s;
    asm("sub.cc.u32	 %0, %0,%12;\n\t"	// r0-=r12
	"subc.cc.u32	 %1, %1,%13;\n\t"	// r1-=(r13+c)
	"subc.cc.u32	 %2, %2,%14;\n\t"	// r2-=(r14+c)
	"subc.cc.u32	 %3, %3,%15;\n\t"	// r3-=(r15+c)
	"subc.cc.u32	 %4, %4,%16;\n\t"	// r4-=(r16+c)
	"subc.cc.u32	 %5, %5,%17;\n\t"	// r5-=(r17+c)
	"subc.cc.u32	 %6, %6,%18;\n\t"	// r6-=(r18+c)
	"subc.cc.u32	 %7, %7,%19;\n\t"	// r7-=(r19+c)
	"subc.cc.u32	 %8, %8,%20;\n\t"	// r8-=(r20+c)
	"subc.cc.u32	 %9, %9,%21;\n\t"	// r9-=(r21+c)
	"subc.cc.u32	%10,%10,%22;\n\t"	//r10-=(r22+c)
	"subc.u32	%11,%11,%23;\n\t"	//r11-=(r23+c)
	: "+r"(_aLo[0]), "+r"(_aLo[1]), "+r"(_aLo[2]), "+r"(_aLo[3]), "+r"(_aLo[4]), "+r"(_aLo[5]), "+r"(_aHi[0]), "+r"(_aHi[1]), "+r"(_aHi[2]), "+r"(_aHi[3]), "+r"(_aHi[4]), "+r"(_aHi[5])
	: "r"(_s[0]), "r"(_s[1]), "r"(_s[2]), "r"(_s[3]), "r"(_s[4]), "r"(_s[5]), "r"(_s[6]), "r"(_s[7]), "r"(_s[8]), "r"(_s[9]), "r"(_s[10]), "r"(_s[11]));
}

__device__ __forceinline__ void sub(const uint192 & aLo, const uint & aHi, const uintXp<uint192> & r)
{
    uint * _aLo = (uint *)&aLo;
    uint * _aHi = (uint *)&aHi;
    const uint * _r = (uint *)&r;
    asm("sub.cc.u32	 %0, %0, %7;\n\t"	// r0-= r7
	"subc.cc.u32	 %1, %1, %8;\n\t"	// r1-=( r8+c)
	"subc.cc.u32	 %2, %2, %9;\n\t"	// r2-=( r9+c)
	"subc.cc.u32	 %3, %3,%10;\n\t"	// r3-=(r10+c)
	"subc.cc.u32	 %4, %4,%11;\n\t"	// r4-=(r11+c)
	"subc.cc.u32	 %5, %5,%12;\n\t"	// r5-=(r12+c)
	"subc.u32	 %6, %6,%13;\n\t"	// r6-=(r13+c)
	: "+r"(_aLo[0]), "+r"(_aLo[1]), "+r"(_aLo[2]), "+r"(_aLo[3]), "+r"(_aLo[4]), "+r"(_aLo[5]), "+r"(_aHi[0])
	: "r"(_r[0]), "r"(_r[1]), "r"(_r[2]), "r"(_r[3]), "r"(_r[4]), "r"(_r[5]), "r"(_r[6]));
}

__device__ __forceinline__ uintXp<uint192> get_q(const uint & aLo, const uint192 & aHi, const uint192 & mu)
{
    uint __attribute__((unused)) tmp;
    uintXp<uint192> q;
    uint * _q = (uint *)&q;
    uint * _aLo = (uint *)&aLo;
    uint * _aHi = (uint *)&aHi;
    uint * _mu = (uint *)&mu;
    asm("mul.hi.u32	 %8, %8,%15    ;\n\t"	// r8 =[ r8*r15].hi    (r-5 => r8)

	"mad.lo.cc.u32	 %1, %9,%15, %1;\n\t"	// r1+=[ r9*r15].lo  
	"madc.lo.u32	 %2,%10,%15,  0;\n\t"	// r2 =[r10*r15].lo+c
	"mad.lo.cc.u32	 %1, %8,%16, %1;\n\t"	// r1+=[ r8*r16].lo  
	"madc.lo.cc.u32	 %2, %9,%16, %2;\n\t"	// r2+=[ r9*r16].lo+c
	"madc.lo.u32	 %3,%11,%15,  0;\n\t"	// r3 =[r11*r15].lo+c

	"mad.lo.cc.u32	 %2, %8,%17, %2;\n\t"	// r2+=[ r8*r17].lo  
	"madc.lo.cc.u32	 %3,%10,%16, %3;\n\t"	// r3+=[r10*r16].lo+c
	"madc.lo.u32	 %4,%12,%15,  0;\n\t"	// r4 =[r12*r15].lo+c
	"mad.hi.cc.u32	 %2, %9,%15, %2;\n\t"	// r2+=[ r9*r15].hi  
	"madc.lo.cc.u32	 %3, %9,%17, %3;\n\t"	// r3+=[ r9*r17].lo+c
	"madc.lo.cc.u32	 %4,%11,%16, %4;\n\t"	// r4+=[r11*r16].lo+c
	"madc.lo.u32	 %5,%13,%15,  0;\n\t"	// r5 =[r13*r15].lo+c
	"mad.hi.cc.u32	 %2, %8,%16, %2;\n\t"	// r2+=[ r8*r16].hi  
	"madc.lo.cc.u32	 %3, %8,%18, %3;\n\t"	// r3+=[ r8*r18].lo+c
	"madc.lo.cc.u32	 %4,%10,%17, %4;\n\t"	// r4+=[r10*r17].lo+c
	"madc.lo.cc.u32	 %5,%12,%16, %5;\n\t"	// r5+=[r12*r16].lo+c
	"madc.lo.u32	 %6,%14,%15,  0;\n\t"	// r6 =[r14*r15].lo+c

	"mad.hi.cc.u32	 %3,%10,%15, %3;\n\t"	// r3+=[r10*r15].hi  
	"madc.lo.cc.u32	 %4, %9,%18, %4;\n\t"	// r4+=[ r9*r18].lo+c
	"madc.lo.cc.u32	 %5,%11,%17, %5;\n\t"	// r5+=[r11*r17].lo+c
	"madc.lo.cc.u32	 %6,%13,%16, %6;\n\t"	// r6+=[r13*r16].lo+c
	"madc.lo.u32	 %7,%14,%16,  0;\n\t"	// r7 =[r14*r16].lo+c
	"mad.hi.cc.u32	 %3, %9,%16, %3;\n\t"	// r3+=[ r9*r16].hi  
	"madc.lo.cc.u32	 %4, %8,%19, %4;\n\t"	// r4+=[ r8*r19].lo+c
	"madc.lo.cc.u32	 %5,%10,%18, %5;\n\t"	// r5+=[r10*r18].lo+c
	"madc.lo.cc.u32	 %6,%12,%17, %6;\n\t"	// r6+=[r12*r17].lo+c
	"madc.lo.cc.u32	 %7,%13,%17, %7;\n\t"	// r7+=[r13*r17].lo+c
	"madc.lo.u32	 %8,%14,%17,  0;\n\t"	// r8 =[r14*r17].lo+c
	"mad.hi.cc.u32	 %3, %8,%17, %3;\n\t"	// r3+=[ r8*r17].hi  
	"madc.hi.cc.u32	 %4,%11,%15, %4;\n\t"	// r4+=[r11*r15].hi+c
	"madc.lo.cc.u32	 %5, %9,%19, %5;\n\t"	// r5+=[ r9*r19].lo+c
	"madc.lo.cc.u32	 %6,%11,%18, %6;\n\t"	// r6+=[r11*r18].lo+c
	"madc.lo.cc.u32	 %7,%12,%18, %7;\n\t"	// r7+=[r12*r18].lo+c
	"madc.lo.cc.u32	 %8,%13,%18, %8;\n\t"	// r8+=[r13*r18].lo+c
	"madc.lo.u32	 %9,%14,%18,  0;\n\t"	// r9 =[r14*r18].lo+c

	"mad.hi.cc.u32	 %4,%10,%16, %4;\n\t"	// r4+=[r10*r16].hi  
	"madc.lo.cc.u32	 %5, %8,%20, %5;\n\t"	// r5+=[ r8*r20].lo+c
	"madc.lo.cc.u32	 %6,%10,%19, %6;\n\t"	// r6+=[r10*r19].lo+c
	"madc.lo.cc.u32	 %7,%11,%19, %7;\n\t"	// r7+=[r11*r19].lo+c
	"madc.lo.cc.u32	 %8,%12,%19, %8;\n\t"	// r8+=[r12*r19].lo+c
	"madc.lo.cc.u32	 %9,%13,%19, %9;\n\t"	// r9+=[r13*r19].lo+c
	"madc.lo.u32	%10,%14,%19,  0;\n\t"	//r10 =[r14*r19].lo+c
	"mad.hi.cc.u32	 %4, %9,%17, %4;\n\t"	// r4+=[ r9*r17].hi  
	"madc.hi.cc.u32	 %5,%12,%15, %5;\n\t"	// r5+=[r12*r15].hi+c
	"madc.lo.cc.u32	 %6, %9,%20, %6;\n\t"	// r6+=[ r9*r20].lo+c
	"madc.lo.cc.u32	 %7,%10,%20, %7;\n\t"	// r7+=[r10*r20].lo+c
	"madc.lo.cc.u32	 %8,%11,%20, %8;\n\t"	// r8+=[r11*r20].lo+c
	"madc.lo.cc.u32	 %9,%12,%20, %9;\n\t"	// r9+=[r12*r20].lo+c
	"madc.lo.cc.u32	%10,%13,%20,%10;\n\t"	//r10+=[r13*r20].lo+c
	"madc.lo.u32	%11,%14,%20,  0;\n\t"	//r11 =[r14*r20].lo+c
	"mad.hi.cc.u32	 %4, %8,%18, %4;\n\t"	// r4+=[ r8*r18].hi  
	"madc.hi.cc.u32	 %5,%11,%16, %5;\n\t"	// r5+=[r11*r16].hi+c
	"madc.hi.cc.u32	 %6,%13,%15, %6;\n\t"	// r6+=[r13*r15].hi+c
	"madc.hi.cc.u32	 %7,%14,%15, %7;\n\t"	// r7+=[r14*r15].hi+c
	"madc.hi.cc.u32	 %8,%14,%16, %8;\n\t"	// r8+=[r14*r16].hi+c
	"madc.hi.cc.u32	 %9,%14,%17, %9;\n\t"	// r9+=[r14*r17].hi+c
	"madc.hi.cc.u32	%10,%14,%18,%10;\n\t"	//r10+=[r14*r18].hi+c
	"madc.hi.cc.u32	%11,%14,%19,%11;\n\t"	//r11+=[r14*r19].hi+c
	"madc.hi.u32	%12,%14,%20,  0;\n\t"	//r12 =[r14*r20].hi+c

	"mad.hi.cc.u32	 %5,%10,%17, %5;\n\t"	// r5+=[r10*r17].hi  
	"madc.hi.cc.u32	 %6,%12,%16, %6;\n\t"	// r6+=[r12*r16].hi+c
	"madc.hi.cc.u32	 %7,%13,%16, %7;\n\t"	// r7+=[r13*r16].hi+c
	"madc.hi.cc.u32	 %8,%13,%17, %8;\n\t"	// r8+=[r13*r17].hi+c
	"madc.hi.cc.u32	 %9,%13,%18, %9;\n\t"	// r9+=[r13*r18].hi+c
	"madc.hi.cc.u32	%10,%13,%19,%10;\n\t"	//r10+=[r13*r19].hi+c
	"madc.hi.cc.u32	%11,%13,%20,%11;\n\t"	//r11+=[r13*r20].hi+c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+= c
	"addc.u32	%13,  0,  0    ;\n\t"	//r13 = c
	"mad.hi.cc.u32	 %5, %9,%18, %5;\n\t"	// r5+=[ r9*r18].hi  
	"madc.hi.cc.u32	 %6,%11,%17, %6;\n\t"	// r6+=[r11*r17].hi+c
	"madc.hi.cc.u32	 %7,%12,%17, %7;\n\t"	// r7+=[r12*r17].hi+c
	"madc.hi.cc.u32	 %8,%12,%18, %8;\n\t"	// r8+=[r12*r18].hi+c
	"madc.hi.cc.u32	 %9,%12,%19, %9;\n\t"	// r9+=[r12*r19].hi+c
	"madc.hi.cc.u32	%10,%12,%20,%10;\n\t"	//r10+=[r12*r20].hi+c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+= c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+= c
	"addc.u32	%13,%13,  0    ;\n\t"	//r13+= c
	"mad.hi.cc.u32	 %5, %8,%19, %5;\n\t"	// r5+=[ r8*r19].hi  
	"madc.hi.cc.u32	 %6,%10,%18, %6;\n\t"	// r6+=[r10*r18].hi+c
	"madc.hi.cc.u32	 %7,%11,%18, %7;\n\t"	// r7+=[r11*r18].hi+c
	"madc.hi.cc.u32	 %8,%11,%19, %8;\n\t"	// r8+=[r11*r19].hi+c
	"madc.hi.cc.u32	 %9,%11,%20, %9;\n\t"	// r9+=[r11*r20].hi+c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+= c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+= c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+= c
	"addc.u32	%13,%13,  0    ;\n\t"	//r13+= c

	"mad.hi.cc.u32	 %6, %9,%19, %6;\n\t"	// r6+=[ r9*r19].hi  
	"madc.hi.cc.u32	 %7,%10,%19, %7;\n\t"	// r7+=[r10*r19].hi+c
	"madc.hi.cc.u32	 %8,%10,%20, %8;\n\t"	// r8+=[r10*r20].hi+c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+= c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+= c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+= c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+= c
	"addc.u32	%13,%13,  0    ;\n\t"	//r13+= c
	"mad.hi.cc.u32	 %6, %8,%20, %6;\n\t"	// r6+=[ r8*r20].hi  
	"madc.hi.cc.u32	 %7, %9,%20, %7;\n\t"	// r7+=[ r9*r20].hi+c
	"addc.cc.u32	 %8, %8,  0    ;\n\t"	// r8+= c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+= c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+= c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+= c
	"addc.cc.u32	%12,%12,  0    ;\n\t"	//r12+= c
	"addc.u32	%13,%13,  0    ;\n\t"	//r13+= c








	"add.cc.u32	 %6, %6,%11    ;\n\t"	// r6+=r11
	"addc.cc.u32	 %7, %7,%12    ;\n\t"	// r7+=r12+c
	"addc.cc.u32	 %8, %8,%13    ;\n\t"	// r8+=r13+c
	"addc.cc.u32	 %9, %9,%14    ;\n\t"	// r9+=r14+c
	"addc.cc.u32	%10,%10,%15    ;\n\t"	//r10+=r15+c
	"addc.cc.u32	%11,%11,%16    ;\n\t"	//r11+=r16+c
	"addc.cc.u32	%12,%12,%17    ;\n\t"	//r12+=r17+c
	"addc.u32	%13,%13,  0    ;\n\t"	//r13+=c
	: "=r"(tmp), "=r"(_q[0]), "=r"(_q[1]), "=r"(_q[2]), "=r"(_q[3]), "=r"(_q[4]), "=r"(_q[5]), "=r"(_q[6])
	: "r"(_aLo[0]), "r"(_aHi[0]), "r"(_aHi[1]), "r"(_aHi[2]), "r"(_aHi[3]), "r"(_aHi[4]), "r"(_aHi[5]), "r"(_mu[0]), "r"(_mu[1]), "r"(_mu[2]), "r"(_mu[3]), "r"(_mu[4]), "r"(_mu[5]));

    return q;
}

__device__ __forceinline__ uintXp<uint192> get_r2(const uintXp<uint192> & q, const uint192 & modulus)
{
    uintXp<uint192> r;
    uint * _r = (uint *)&r;
    uint * _q = (uint *)&q;
    uint * _m = (uint *)&modulus;

    asm("mad.lo.u32	 %0, %7,%14,  0;\n\t"	// r0 =[ r7*r14].lo  
	"mad.lo.u32	 %1, %7,%15,  0;\n\t"	// r1 =[ r7*r15].lo  
	"mad.lo.cc.u32	 %1, %8,%14, %1;\n\t"	// r1+=[ r8*r14].lo  
	"madc.lo.u32	 %2, %7,%16, %2;\n\t"	// r2+=[ r7*r16].lo+c
	"mad.hi.cc.u32	 %1, %7,%14, %1;\n\t"	// r1+=[ r7*r14].hi  
	"madc.lo.cc.u32	 %2, %8,%15, %2;\n\t"	// r2+=[ r8*r15].lo+c
	"madc.lo.cc.u32	 %3, %7,%17, %3;\n\t"	// r3+=[ r7*r17].lo+c
	"madc.lo.u32	 %4, %7,%18,  0;\n\t"	// r4 =[ r7*r18].lo+c
	"mad.hi.cc.u32	 %2, %7,%15, %2;\n\t"	// r2+=[ r7*r15].hi  
	"madc.lo.cc.u32	 %3, %8,%16, %3;\n\t"	// r3+=[ r8*r16].lo+c
	"madc.lo.cc.u32	 %4, %8,%17, %4;\n\t"	// r4+=[ r8*r17].lo+c
	"madc.lo.cc.u32	 %5, %7,%19, %5;\n\t"	// r5+=[ r7*r19].lo+c
	"madc.lo.u32	 %6, %8,%19,  0;\n\t"	// r6 =[ r8*r19].lo+c
	"mad.lo.cc.u32	 %2, %9,%14, %2;\n\t"	// r2+=[ r9*r14].lo  
	"madc.hi.cc.u32	 %3, %7,%16, %3;\n\t"	// r3+=[ r7*r16].hi+c
	"madc.hi.cc.u32	 %4, %7,%17, %4;\n\t"	// r4+=[ r7*r17].hi+c
	"madc.lo.cc.u32	 %5, %8,%18, %5;\n\t"	// r5+=[ r8*r18].lo+c
	"madc.hi.cc.u32	 %6, %7,%19, %6;\n\t"	// r6+=[ r7*r19].hi+c
	"mad.hi.cc.u32	 %2, %8,%14, %2;\n\t"	// r2+=[ r8*r14].hi  
	"madc.lo.cc.u32	 %3, %9,%15, %3;\n\t"	// r3+=[ r9*r15].lo+c
	"madc.lo.cc.u32	 %4, %9,%16, %4;\n\t"	// r4+=[ r9*r16].lo+c
	"madc.hi.cc.u32	 %5, %7,%18, %5;\n\t"	// r5+=[ r7*r18].hi+c
	"madc.lo.cc.u32	 %6, %9,%18, %6;\n\t"	// r6+=[ r9*r18].lo+c
	"mad.hi.cc.u32	 %3, %8,%15, %3;\n\t"	// r3+=[ r8*r15].hi  
	"madc.hi.cc.u32	 %4, %8,%16, %4;\n\t"	// r4+=[ r8*r16].hi+c
	"madc.lo.cc.u32	 %5, %9,%17, %5;\n\t"	// r5+=[ r9*r17].lo+c
	"madc.hi.cc.u32	 %6, %8,%18, %6;\n\t"	// r6+=[ r8*r18].hi+c
	"mad.lo.cc.u32	 %3,%10,%14, %3;\n\t"	// r3+=[r10*r14].lo  
	"madc.lo.cc.u32	 %4,%10,%15, %4;\n\t"	// r4+=[r10*r15].lo+c
	"madc.hi.cc.u32	 %5, %8,%17, %5;\n\t"	// r5+=[ r8*r17].hi+c
	"madc.lo.cc.u32	 %6,%10,%17, %6;\n\t"	// r6+=[r10*r17].lo+c
	"mad.hi.cc.u32	 %3, %9,%14, %3;\n\t"	// r3+=[ r9*r14].hi  
	"madc.hi.cc.u32	 %4, %9,%15, %4;\n\t"	// r4+=[ r9*r15].hi+c
	"madc.lo.cc.u32	 %5,%10,%16, %5;\n\t"	// r5+=[r10*r16].lo+c
	"madc.hi.cc.u32	 %6, %9,%17, %6;\n\t"	// r6+=[ r9*r17].hi+c
	"mad.lo.cc.u32	 %4,%11,%14, %4;\n\t"	// r4+=[r11*r14].lo  
	"madc.hi.cc.u32	 %5, %9,%16, %5;\n\t"	// r5+=[ r9*r16].hi+c
	"madc.lo.cc.u32	 %6,%11,%16, %6;\n\t"	// r6+=[r11*r16].lo+c
	"mad.hi.cc.u32	 %4,%10,%14, %4;\n\t"	// r4+=[r10*r14].hi  
	"madc.lo.cc.u32	 %5,%11,%15, %5;\n\t"	// r5+=[r11*r15].lo+c
	"madc.hi.cc.u32	 %6,%10,%16, %6;\n\t"	// r6+=[r10*r16].hi+c
	"mad.hi.cc.u32	 %5,%10,%15, %5;\n\t"	// r5+=[r10*r15].hi  
	"madc.lo.cc.u32	 %6,%12,%15, %6;\n\t"	// r6+=[r12*r15].lo+c
	"mad.lo.cc.u32	 %5,%12,%14, %5;\n\t"	// r5+=[r12*r14].lo  
	"madc.hi.cc.u32	 %6,%11,%15, %6;\n\t"	// r6+=[r11*r15].hi+c
	"mad.hi.cc.u32	 %5,%11,%14, %5;\n\t"	// r5+=[r11*r14].hi  
	"madc.lo.cc.u32	 %6,%13,%14, %6;\n\t"	// r6+=[r13*r14].lo+c
	"mad.hi.cc.u32	 %6,%12,%14, %6;\n\t"	// r6+=[r12*r14].hi  
	: "=r"(_r[0]), "=r"(_r[1]), "=r"(_r[2]), "=r"(_r[3]), "=r"(_r[4]), "=r"(_r[5]), "=r"(_r[6])
	: "r"(_q[0]), "r"(_q[1]), "r"(_q[2]), "r"(_q[3]), "r"(_q[4]), "r"(_q[5]), "r"(_q[6]), "r"(_m[0]), "r"(_m[1]), "r"(_m[2]), "r"(_m[3]), "r"(_m[4]), "r"(_m[5]));

    return r;
}
__device__ __forceinline__ void mad(const uint192 & aLo, const uint192 & aHi, uint & overflow, const uint192 & b, const uint192 & c)
{
    uint * _aLo = (uint *)&aLo;
    uint * _aHi = (uint *)&aHi;
    const uint * _b = (uint *)&b;
    const uint * _c = (uint *)&c;

    asm("mad.lo.cc.u32	 %0,%13,%19, %0;\n\t"	// r0+=[r13*r19].lo  
	"madc.hi.cc.u32	 %1,%13,%19, %1;\n\t"	// r1+=[r13*r19].hi  
	"madc.lo.cc.u32	 %2,%15,%19, %2;\n\t"	// r2+=[r15*r19].lo+c
	"madc.hi.cc.u32	 %3,%15,%19, %3;\n\t"	// r3+=[r15*r19].hi+c
	"madc.lo.cc.u32	 %4,%17,%19, %4;\n\t"	// r4+=[r17*r19].lo+c
	"madc.hi.cc.u32	 %5,%17,%19, %5;\n\t"	// r5+=[r17*r19].hi+c
	"madc.lo.cc.u32	 %6,%18,%20, %6;\n\t"	// r6+=[r18*r20].lo+c
	"madc.hi.cc.u32	 %7,%18,%20, %7;\n\t"	// r7+=[r18*r20].hi+c
	"madc.lo.cc.u32	 %8,%18,%22, %8;\n\t"	// r8+=[r18*r22].lo+c
	"madc.hi.cc.u32	 %9,%18,%22, %9;\n\t"	// r9+=[r18*r22].hi+c
	"madc.lo.cc.u32	%10,%18,%24,%10;\n\t"	//r10+=[r18*r24].lo+c
	"madc.hi.cc.u32	%11,%18,%24,%11;\n\t"	//r11+=[r18*r24].hi+c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %1,%14,%19, %1;\n\t"	// r1+=[r14*r19].lo  
	"madc.hi.cc.u32	 %2,%14,%19, %2;\n\t"	// r2+=[r14*r19].hi  
	"madc.lo.cc.u32	 %3,%16,%19, %3;\n\t"	// r3+=[r16*r19].lo+c
	"madc.hi.cc.u32	 %4,%16,%19, %4;\n\t"	// r4+=[r16*r19].hi+c
	"madc.lo.cc.u32	 %5,%18,%19, %5;\n\t"	// r5+=[r18*r19].lo+c
	"madc.hi.cc.u32	 %6,%18,%19, %6;\n\t"	// r6+=[r18*r19].hi+c
	"madc.lo.cc.u32	 %7,%18,%21, %7;\n\t"	// r7+=[r18*r21].lo+c
	"madc.hi.cc.u32	 %8,%18,%21, %8;\n\t"	// r8+=[r18*r21].hi+c
	"madc.lo.cc.u32	 %9,%18,%23, %9;\n\t"	// r9+=[r18*r23].lo+c
	"madc.hi.cc.u32	%10,%18,%23,%10;\n\t"	//r10+=[r18*r23].hi+c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %1,%13,%20, %1;\n\t"	// r1+=[r13*r20].lo  
	"madc.hi.cc.u32	 %2,%13,%20, %2;\n\t"	// r2+=[r13*r20].hi  
	"madc.lo.cc.u32	 %3,%15,%20, %3;\n\t"	// r3+=[r15*r20].lo+c
	"madc.hi.cc.u32	 %4,%15,%20, %4;\n\t"	// r4+=[r15*r20].hi+c
	"madc.lo.cc.u32	 %5,%17,%20, %5;\n\t"	// r5+=[r17*r20].lo+c
	"madc.hi.cc.u32	 %6,%17,%20, %6;\n\t"	// r6+=[r17*r20].hi+c
	"madc.lo.cc.u32	 %7,%17,%22, %7;\n\t"	// r7+=[r17*r22].lo+c
	"madc.hi.cc.u32	 %8,%17,%22, %8;\n\t"	// r8+=[r17*r22].hi+c
	"madc.lo.cc.u32	 %9,%17,%24, %9;\n\t"	// r9+=[r17*r24].lo+c
	"madc.hi.cc.u32	%10,%17,%24,%10;\n\t"	//r10+=[r17*r24].hi+c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %2,%14,%20, %2;\n\t"	// r2+=[r14*r20].lo  
	"madc.hi.cc.u32	 %3,%14,%20, %3;\n\t"	// r3+=[r14*r20].hi  
	"madc.lo.cc.u32	 %4,%16,%20, %4;\n\t"	// r4+=[r16*r20].lo+c
	"madc.hi.cc.u32	 %5,%16,%20, %5;\n\t"	// r5+=[r16*r20].hi+c
	"madc.lo.cc.u32	 %6,%17,%21, %6;\n\t"	// r6+=[r17*r21].lo+c
	"madc.hi.cc.u32	 %7,%17,%21, %7;\n\t"	// r7+=[r17*r21].hi+c
	"madc.lo.cc.u32	 %8,%17,%23, %8;\n\t"	// r8+=[r17*r23].lo+c
	"madc.hi.cc.u32	 %9,%17,%23, %9;\n\t"	// r9+=[r17*r23].hi+c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %2,%13,%21, %2;\n\t"	// r2+=[r13*r21].lo  
	"madc.hi.cc.u32	 %3,%13,%21, %3;\n\t"	// r3+=[r13*r21].hi  
	"madc.lo.cc.u32	 %4,%15,%21, %4;\n\t"	// r4+=[r15*r21].lo+c
	"madc.hi.cc.u32	 %5,%15,%21, %5;\n\t"	// r5+=[r15*r21].hi+c
	"madc.lo.cc.u32	 %6,%16,%22, %6;\n\t"	// r6+=[r16*r22].lo+c
	"madc.hi.cc.u32	 %7,%16,%22, %7;\n\t"	// r7+=[r16*r22].hi+c
	"madc.lo.cc.u32	 %8,%16,%24, %8;\n\t"	// r8+=[r16*r24].lo+c
	"madc.hi.cc.u32	 %9,%16,%24, %9;\n\t"	// r9+=[r16*r24].hi+c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %3,%14,%21, %3;\n\t"	// r3+=[r14*r21].lo  
	"madc.hi.cc.u32	 %4,%14,%21, %4;\n\t"	// r4+=[r14*r21].hi  
	"madc.lo.cc.u32	 %5,%16,%21, %5;\n\t"	// r5+=[r16*r21].lo+c
	"madc.hi.cc.u32	 %6,%16,%21, %6;\n\t"	// r6+=[r16*r21].hi+c
	"madc.lo.cc.u32	 %7,%16,%23, %7;\n\t"	// r7+=[r16*r23].lo+c
	"madc.hi.cc.u32	 %8,%16,%23, %8;\n\t"	// r8+=[r16*r23].hi+c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %3,%13,%22, %3;\n\t"	// r3+=[r13*r22].lo  
	"madc.hi.cc.u32	 %4,%13,%22, %4;\n\t"	// r4+=[r13*r22].hi  
	"madc.lo.cc.u32	 %5,%15,%22, %5;\n\t"	// r5+=[r15*r22].lo+c
	"madc.hi.cc.u32	 %6,%15,%22, %6;\n\t"	// r6+=[r15*r22].hi+c
	"madc.lo.cc.u32	 %7,%15,%24, %7;\n\t"	// r7+=[r15*r24].lo+c
	"madc.hi.cc.u32	 %8,%15,%24, %8;\n\t"	// r8+=[r15*r24].hi+c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %4,%14,%22, %4;\n\t"	// r4+=[r14*r22].lo  
	"madc.hi.cc.u32	 %5,%14,%22, %5;\n\t"	// r5+=[r14*r22].hi  
	"madc.lo.cc.u32	 %6,%15,%23, %6;\n\t"	// r6+=[r15*r23].lo+c
	"madc.hi.cc.u32	 %7,%15,%23, %7;\n\t"	// r7+=[r15*r23].hi+c
	"addc.cc.u32	 %8, %8,  0    ;\n\t"	// r8+=c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %4,%13,%23, %4;\n\t"	// r4+=[r13*r23].lo  
	"madc.hi.cc.u32	 %5,%13,%23, %5;\n\t"	// r5+=[r13*r23].hi  
	"madc.lo.cc.u32	 %6,%14,%24, %6;\n\t"	// r6+=[r14*r24].lo+c
	"madc.hi.cc.u32	 %7,%14,%24, %7;\n\t"	// r7+=[r14*r24].hi+c
	"addc.cc.u32	 %8, %8,  0    ;\n\t"	// r8+=c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %5,%14,%23, %5;\n\t"	// r5+=[r14*r23].lo  
	"madc.hi.cc.u32	 %6,%14,%23, %6;\n\t"	// r6+=[r14*r23].hi  
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+=c
	"addc.cc.u32	 %8, %8,  0    ;\n\t"	// r8+=c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	"mad.lo.cc.u32	 %5,%13,%24, %5;\n\t"	// r5+=[r13*r24].lo  
	"madc.hi.cc.u32	 %6,%13,%24, %6;\n\t"	// r6+=[r13*r24].hi  
	"addc.cc.u32	 %7, %7,  0    ;\n\t"	// r7+=c
	"addc.cc.u32	 %8, %8,  0    ;\n\t"	// r8+=c
	"addc.cc.u32	 %9, %9,  0    ;\n\t"	// r9+=c
	"addc.cc.u32	%10,%10,  0    ;\n\t"	//r10+=c
	"addc.cc.u32	%11,%11,  0    ;\n\t"	//r11+=c
	"addc.u32	%12,%12,  0    ;\n\t"	//r12+=c
	: "+r"(_aLo[0]), "+r"(_aLo[1]), "+r"(_aLo[2]), "+r"(_aLo[3]), "+r"(_aLo[4]), "+r"(_aLo[5]), "+r"(_aHi[0]), "+r"(_aHi[1]), "+r"(_aHi[2]), "+r"(_aHi[3]), "+r"(_aHi[4]), "+r"(_aHi[5]), "+r"(overflow)
	: "r"(_b[0]), "r"(_b[1]), "r"(_b[2]), "r"(_b[3]), "r"(_b[4]), "r"(_b[5]), "r"(_c[0]), "r"(_c[1]), "r"(_c[2]), "r"(_c[3]), "r"(_c[4]), "r"(_c[5]));
}

#endif

